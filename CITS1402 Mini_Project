#DB.sql

  CREATE TABLE Car (
  carMake TEXT,
  carModel TEXT,
  carYear TEXT,
  dailyCost INTEGER,
  kmCost REAL,
  PRIMARY KEY (carMake, carModel, carYear)
  );

  CREATE TABLE Vehicle (
  carMake TEXT,
  carModel TEXT,
  carYear TEXT,
  VIN TEXT PRIMARY KEY
    CHECK(VIN glob '[0-9A-Z][0-9A-Z][X0-9][0-9A-Z][0-9A-Z]')
    CHECK(VIN glob '[^IOQ][^IOQ]?[^IOQ][^IOQ]'),
  odometer INTEGER,
  FOREIGN KEY (carMake, carModel, carYear) REFERENCES Car(carMake, carModel, carYear)
  );

  CREATE TABLE Customer (
  id INTEGER PRIMARY KEY,
  name TEXT,
  email TEXT
  );

  CREATE TABLE rental (
  customerId INTEGER,
  VIN TEXT,
  odo_out INTEGER,
  odo_back INTEGER
    CHECK(odo_back >= odo_out),
  date_out TEXT,
  date_back TEXT
    CHECK(julianday(date_back) >= julianday(date_out)),
  FOREIGN KEY (customerId) REFERENCES Customer(id)
    ON UPDATE CASCADE,
  FOREIGN KEY (VIN) REFERENCES Vehicle(VIN)
  );


#DBTrigger.sql

  CREATE TRIGGER out_odoLogger 
  AFTER INSERT ON rental
  FOR EACH ROW
  BEGIN
  UPDATE rental SET odo_out = ((SELECT odometer FROM Vehicle,rental WHERE rental.VIN = NEW.VIN
                AND NEW.VIN = Vehicle.VIN)) WHERE odo_out IS NULL;
  END;

  CREATE TRIGGER back_odoLogger
  AFTER UPDATE OF odo_back ON rental
  FOR EACH ROW
  WHEN OLD.odo_back is NULL
  BEGIN
  UPDATE Vehicle SET odometer = NEW.odo_back WHERE VIN = NEW.VIN;
  END;
  
 #DBViews.sql
 
   CREATE VIEW CustomerSummary AS
  SELECT rental.customerId, date_out as rental_date_out, date_back as rental_date_back,
  ((julianday(date_back)-julianday(date_out)+1)*dailyCost)+((odo_back-odo_out)*kmCost) as rental_cost
  FROM rental, Car, Vehicle
  WHERE rental.VIN = Vehicle.VIN
  AND (Vehicle.carMake,Vehicle.carModel,Vehicle.carYear)
  = (Car.carMake,Car.carModel,Car.carYear)
  AND date_back is not NULL;

